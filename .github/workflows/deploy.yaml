name: Deploy to DEV on PR

on:
  workflow_dispatch:

  pull_request:
    branches:
      - "main"
    types:
      - closed

env:
  AWS_REGION: "us-east-1"
  ECS_SERVICE: "man-example"
  ECS_CLUSTER: "example-cluster"
  ECR_REPOSITORY: "crons-repo"
  TASK_DEFINITION: "random-task"
  CONTAINER_NAME: "crons"
  CHANNEL_ID: ""

jobs:
  Deploy_DEV:
    runs-on: ubuntu-latest
    if: |
      github.event.pull_request.merged == true &&
      contains(github.event.pull_request.labels.*.name, 'build_deploy')
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials for DEV
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: "AKIAXN6SGZPUYGPBV5WB"
          aws-secret-access-key: "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"
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.run_number }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          
      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.TASK_DEFINITION }} --query taskDefinition > task-definition.json
      
      - name: Fill in the new image ID in the Amazon ECS Task Definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Show Task Definition to Deploy
        run: cat ${{ steps.task-def.outputs.task-definition }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
      - name: Slack Success Notification
        if: success()
        uses: slackapi/slack-github-action@v1.16.0
        with:
          channel-id: ${{ env.CHANNEL_ID }}
          payload: |
            {
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": ":white_check_mark: Deployment was successful for ${{ github.repository }}",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*ECS Cluster:*\n ${{ env.ECS_CLUSTER }}\n\n *ECS Service:*\n ${{ env.ECS_SERVICE }}"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - name: Slack Failure Notification
        if: failure()
        uses: slackapi/slack-github-action@v1.16.0
        with:
          channel-id: ${{ env.CHANNEL_ID }}
          payload: |
            {
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": ":x: Deployment was unsuccessful for ${{ github.repository }}",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*ECS Cluster:*\n ${{ env.ECS_CLUSTER }}\n\n *ECS Service:*\n ${{ env.ECS_SERVICE }}"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}